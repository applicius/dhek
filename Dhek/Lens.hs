{-# LANGUAGE RankNTypes #-}
--------------------------------------------------------------------------------
-- |
-- Module : Dhek.Lens
--
-- Some lens utilities
--------------------------------------------------------------------------------
module Dhek.Lens where

--------------------------------------------------------------------------------
import Control.Monad (when)

--------------------------------------------------------------------------------
import Control.Lens

--------------------------------------------------------------------------------
type Member a b = forall f. Functor f => (b -> f b) -> a -> f a

--------------------------------------------------------------------------------
valueChanged :: (Eq b, Monad m) => Member a b -> a -> a -> (b -> m ()) -> m ()
valueChanged m start end k
    = let sb = start ^. m
          eb = end   ^. m in

      when (sb /= eb) $ k eb
